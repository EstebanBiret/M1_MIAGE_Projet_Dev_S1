@startuml schema-classes-uml

class Produit {
    - libelleProduit: String
    - prixUnitaire: double
    - prixKilo: double
    - nutriscore: char
    - poidsProduit: double
    - conditionnementProduit: String
    - marqueProduit: String

    + getLibelleProduit(): String
    + setLibelleProduit(libelleProduit: String): void
    + getPrixUnitaire(): double
    + setPrixUnitaire(prixUnitaire: double): void
    + getPrixKilo(): double
    + setPrixKilo(prixKilo: double): void
    + getNutriscore(): char
    + setNutriscore(nutriscore: char): void
    + getPoidsProduit(): double
    + setPoidsProduit(poidsProduit: double): void
    + getConditionnementProduit(): String
    + setConditionnementProduit(conditionnementProduit: String): void
    + getMarqueProduit(): String
    + setMarqueProduit(marqueProduit: String): void
    + getIdProduit(): int
    + setIdProduit(idProduit: int): void
    + toString(): String
}

class ProduitDAO {
    + getProduitbyID(idProduit: int): Produit
    + getAllProduits(): List<Produit>
    + produitsParCategorie(categorie: String): List<Produit>
    + getProduitsByLibelle(libelleProduit: String, nomexact: boolean): List<Produit>
    + getProduitsByMarque(marque: String): List<Produit>
}

class ProduitRemplacements {
    - libelleProduit: String
    - prixUnitaire: double
    - prixKilo: double
    - nutriscore: char
    - poidsProduit: double
    - conditionnementProduit: String
    - marqueProduit: String
    - quantiteDisponible: int
    - idMagasin: int
    - nomMagasin: String
    - quantiteChoisie: int

    + getIdProduit(): int
    + getLibelleProduit(): String
    + getPrixUnitaire(): double
    + getPrixKilo(): double
    + getNutriscore(): char
    + getPoidsProduit(): double
    + getConditionnementProduit(): String
    + getMarqueProduit(): String
    + getquantiteDisponible(): int
    + getidMagasin(): int
    + getnomMagasin(): String
    + getquantiteChoisie(): int
    + setquantiteChoisie(quantiteChoisie: int): void
}

class CategorieDAO {
    - categoriesDisponibles: List<String>
    + CategorieDAO()
    + getCategoriesDisponibles(): List<String>
    + getCategories(): List<String>
    + afficherMenuCategorie(): void
    + gererMenuCategorie(produitDAO: ProduitDAO, scanner: Scanner, panierClient: Panier): void
}

class Client {
    - nomClient: String
    - prenomClient: String
    - adresseClient: String
    - telClient: String
    - idMagasinFavori: int

    + Client(idClient: int, nomClient: String, prenomClient: String, adresseClient: String, telClient: String, idMagasinFavori: int)
    + getIdClient(): int
    + getNomClient(): String
    + setNomClient(nom: String): void
    + getPrenomClient(): String
    + setPrenomClient(prenom: String): void
    + getAdresseClient(): String
    + setAdresseClient(adresse: String): void
    + getTelClient(): String
    + setTelClient(tel: String): void
    + getIdMagasinFavori(): int
    + setIdMagasinFavori(idMagasin: int): void
    + creerPanier(): Panier
    + toString(): String
}

class ClientDAO {
    + getClientById(idClient: int): Client
    + getPanierEnCours(idClient: int): Panier
    + getNomClient(idClient: int): String
    + getPrenomClient(idClient: int): String
    + getMagasinFavori(idClient: int): String
    + getHabitudesConsos(idClient: int): List<String>
    + afficherCommandes(commandes: List<Commande>): void
    + getCommandes(idClient: int): List<Commande>
    + getProduitsPlusCommandes(idClient: int): List<String>
}

class Appartenir {}

class Stocker {
    - quantiteEnStock: int
}

class PanierDAO {
     + creerPanier(idClient: int): Panier   
     + ajouterProduitPanier(idPanier: int, idClient: int, idProduit: int, qteVoulue: int, scanner: Scanner): void   
     + checkProduitMagasinDejaPanier(idPanier: int, idProduit: int, idMagasin: int): boolean    
     + checkQteStockMagasin(idProduit: int, idMagasin: int, qte: int): boolean  
     + getQteProduitPanier(idPanier: int, idProduit: int, idMagasin: int): int  
     + insertProduitPanier(idPanier: int, idProduit: int, idMagasin: int, qteVoulue: int): void     
     + updateProduitPanier(idPanier: int, idProduit: int, idMagasin: int, qteVoulue: int): void     
     + afficherPanier(idPanier: int): String     
     + estVide(idPanier: int): boolean   
     + validerPanier(panier: Panier, choix: int): void   
     + annulerPanier(panier: Panier): void   
}

class Magasin {
    - idMagasin: int
    - nomMagasin: String
}

class Panier {                  
    - panierTermine: boolean           
    - dateDebutPanier: Timestamp       
    - dateFinPanier: Timestamp         

    + Panier(idClient: int)            
    + Panier(idPanier: int, idClient: int, dateDebutPanier: Timestamp) 
    + getIdPanier(): int               
    + setIdPanier(idPanier: int): void 
    + getIdClient(): int               
    + getClient(): Client              
    + isPanierTermine(): boolean      
    + setPanierTermine(panierTermine: boolean): void 
    + getDateDebutPanier(): Timestamp  
    + getDateFinPanier(): Timestamp    
    + setDateFinPanier(dateFinPanier: Timestamp): void 
    + exists(): boolean     
}

class Commande {
    - idPanier: int
    - typeCommande: String
    - statutCommande: String
    - dateReception: Timestamp
    - datePreparation: Timestamp
    - dateFinalisation: Timestamp
    
    + getIdCommande(): int
    + setIdCommande(idCommande: int): void
    + getIdPanier(): int
    + getTypeCommande(): String
    + setTypeCommande(typeCommande: String): void
    + getStatutCommande(): String
    + setStatutCommande(statutCommande: String): void
    + getDateReception(): Timestamp
    + setDateReception(dateReception: Timestamp): void
    + getDatePreparation(): Timestamp
    + setDatePreparation(datePreparation: Timestamp): void
    + getDateFinalisation(): Timestamp
    + setDateFinalisation(dateFinalisation: Timestamp): void
    + toString(): String
}

class PreparateurDAO {
    + getCommandesEnAttente(): List<Commande>             
    + getCommandesPreparees(): List<Commande>             
    + getCommandesFinalisees(): List<Commande>            
    + commencerAPreparer(idCommande: int): void           
    + finaliserCommande(idCommande: int): void       
}

class Panier_Produit {
    + quantiteDemande: int
}

class GestionnaireDAO {                             
    + ajouterProduitCatalogue(p: Produit, idCategorie: int): void 
    + majStockProduit(idProduit: int, quantite: int, idMagasin: int, augmenter: boolean): void 
    + getProduitPlusCommandes(): String                    
    + getTopsCategories(): String                          
    + getTopClientsNbCommandes(): String                   
    + getTopsClientsChiffreAffaires(): String              
    + calculerTempsMoyenRealisationPaniers(): double       
    + calculerTempsMoyenPreparationCommandes(): double     
    + importerProduitsDepuisCSV(cheminFichier: String): void 
    + analyserProfilsClients(): void
}

class panier_commande{}

' Associations
Produit "1" -- "*" ProduitDAO : gère
CategorieDAO "1" -- "*" Appartenir : gère
Client "1" -- "*" ClientDAO : gère
Panier "1" -- "*" PanierDAO : gère
GestionnaireDAO "1" -- "*" Produit : gère
PreparateurDAO "1" -- "*" Commande : gère
Panier "1" -- "*" Client : rempli
Commande "1" -- "*" panier_commande : contient
Panier "1" -- "*" panier_commande: fait partie
Produit "1" -- "*" Appartenir : appartient à
Produit "*" -- "*" Stocker : stocké dans
Magasin "*" -- "*" Stocker : stocké dans
Produit "1" -- "*" Panier_Produit : ajouté à
Panier "1" -- "*" Panier_Produit : contient
Magasin "1" -- "*" Panier_Produit : disponible dans
ProduitRemplacements "1" -- "*" Panier_Produit : proposé comme

@enduml